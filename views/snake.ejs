<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>HTML5 snake - Canvas Snake Game</title>
    <!--[if IE]>
    <script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->

    <% include template/navbar %>
    <link rel="stylesheet" href="http://localhost:3000/stylesheets/snake.css" type="text/css">
</head>

<br>
<br>
<br>
<br>
<body>

<h1>html5-snake</h1>
<p><a href="http://en.wikipedia.org/wiki/HTML5">HTML5</a> variation of the classic <a href="http://en.wikipedia.org/wiki/Snake_(video_game)">snake game</a>.</p>
<div id="rank-list"> Top Five Scores</div>

<div>
    <canvas id="the-game" width="400" height="400">
</div>


<p>Control snake with arrow keys, WASD, or HJKL (vim keys).</p>

<p>New food may appear under snake, uncoil to reveal.</p>

<p>Collect the food to grow and increase speed.</p>


<script type="text/javascript">
    var canvas = document.getElementById("the-game");
    var context = canvas.getContext("2d");
    var game, snake, food;

    game = {

        score: 0,
        fps: 8,
        over: false,
        pause: false,
        message: null,

        start: function() {
            game.over = false;
            game.message = null;
            game.score = 0;
            game.fps = 7;
            snake.init();
            food.set();
        },

        stop: function() {
            game.over = true;
            game.message = 'GAME OVER - PRESS SPACEBAR';

        },

        drawBox: function(x, y, size, color) {
            context.fillStyle = color;
            context.beginPath();
            context.moveTo(x - (size / 2), y - (size / 2));
            context.lineTo(x + (size / 2), y - (size / 2));
            context.lineTo(x + (size / 2), y + (size / 2));
            context.lineTo(x - (size / 2), y + (size / 2));
            context.closePath();
            context.fill();
        },

        drawScore: function() {
            context.fillStyle = '#999';
            context.font = (canvas.height) + 'px Impact, sans-serif';
            context.textAlign = 'center';
            context.fillText(game.score, canvas.width / 2, canvas.height * 0.9);
        },

        drawMessage: function() {
            if (game.message !== null) {
                context.fillStyle = '#00F';
                context.strokeStyle = '#FFF';
                context.font = (canvas.height / 15) + 'px Impact';
                context.textAlign = 'center';
                context.fillText(game.message, canvas.width / 2, canvas.height / 2);
                context.strokeText(game.message, canvas.width / 2, canvas.height / 2);
            }
        },


        resetCanvas: function() {
            context.clearRect(0, 0, canvas.width, canvas.height);
        }

    };

    snake = {

        size: canvas.width / 40,
        x: null,
        y: null,
        color: 'blue',
        direction: 'left',
        sections: [],

        init: function() {
            snake.sections = [];
            snake.direction = 'left';
            snake.x = canvas.width / 2 + snake.size / 2;
            snake.y = canvas.height / 2 + snake.size / 2;
            for (var i = snake.x + (2 * snake.size); i >= snake.x; i -= snake.size) {
                snake.sections.push(i + ',' + snake.y);
            }
        },

        move: function() {
            switch (snake.direction) {
                case 'up':
                    snake.y -= snake.size;
                    break;
                case 'down':
                    snake.y += snake.size;
                    break;
                case 'left':
                    snake.x -= snake.size;
                    break;
                case 'right':
                    snake.x += snake.size;
                    break;
            }
            snake.checkCollision();
            snake.checkGrowth();
            snake.sections.push(snake.x + ',' + snake.y);
        },

        draw: function() {
            for (var i = 0; i < snake.sections.length; i++) {
                snake.drawSection(snake.sections[i].split(','));
            }
        },

        drawSection: function(section) {
            game.drawBox(parseInt(section[0]), parseInt(section[1]), snake.size, snake.color);
        },

        checkCollision: function() {
            if (snake.isCollision(snake.x, snake.y) === true) {
                if (game.score > 0) {
                    saveScore(game.score);
                }
                var rank=document.getElementById("rank-list");
                rank.innerHTML="Top Five Scores";
                loadTopFiveScores();
                game.stop();

            }
        },

        isCollision: function(x, y) {
            if ( x < snake.size / 2 ||
                    x > canvas.width ||
                    y < snake.size / 2 ||
                    y > canvas.height ||
                    snake.sections.indexOf(x + ',' + y) >= 0) {
                return true;
            }
        },

        checkGrowth: function() {
            if (snake.x == food.x && snake.y == food.y) {
                game.score++;
                if (game.score % 5 == 0 && game.fps < 60) {
                    game.fps++;
                }
                food.set();
            } else {
                snake.sections.shift();
            }
        }

    };

    food = {

        size: null,
        x: null,
        y: null,
        color: '#0FF',

        set: function() {
            food.size = snake.size;
            food.x = (Math.ceil(Math.random() * 10) * snake.size * 4) - snake.size / 2;
            food.y = (Math.ceil(Math.random() * 10) * snake.size * 4) - snake.size / 2;
        },

        draw: function() {
            game.drawBox(food.x, food.y, food.size, food.color);
        }

    };

    var inverseDirection = {
        'up': 'down',
        'left': 'right',
        'right': 'left',
        'down': 'up'
    };

    var keys = {
        up: [38, 75, 87],
        down: [40, 74, 83],
        left: [37, 65, 72],
        right: [39, 68, 76],
        start_game: [13, 32]
    };

    function getKey(value){
        for (var key in keys){
            if (keys[key] instanceof Array && keys[key].indexOf(value) >= 0){
                return key;
            }
        }
        return null;
    }

    addEventListener("keydown", function (e) {
        var lastKey = getKey(e.keyCode);
        if (['up', 'down', 'left', 'right'].indexOf(lastKey) >= 0
                && lastKey != inverseDirection[snake.direction]) {
            snake.direction = lastKey;
        } else if (['start_game'].indexOf(lastKey) >= 0 && game.over) {
            game.start();
        } else if (['start_game'].indexOf(lastKey) >= 0 && game.pause==true) {
            game.pause=false;
        } else if (['start_game'].indexOf(lastKey) >= 0 && game.over==false) {
            game.pause=true
            context.fillStyle = 'red';
            context.strokeStyle = 'yellow';
            context.font = (canvas.height / 15) + 'px Impact';
            context.textAlign = 'center';
            context.fillText("Game Paused", canvas.width / 2, canvas.height / 2);
            context.strokeText("Game Paused", canvas.width / 2, canvas.height / 2);;
        }
    }, false);

    var requestAnimationFrame = window.requestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            window.mozRequestAnimationFrame;

    function loop() {
        if (game.over == false && game.pause==false) {
            game.resetCanvas();
            game.drawScore();
            snake.move();
            food.draw();
            snake.draw();
            game.drawMessage();
        }
        setTimeout(function() {
            requestAnimationFrame(loop);
        }, 1000/game.fps);


    };

    function loadTopFiveScores() {
        function Pair(key, value) {
            this.key = key;
            this.value = value;
        }

        var allScores = [];
        for (var prop in localStorage) {
            allScores.push(new Pair(prop, localStorage[prop]));
        }

        // sort the scores
        for (var i = 0; i < allScores.length - 1; i++) {
            var maxScoreIndex = i;
            for (var j = i + 1; j < allScores.length; j++) {
                if (parseInt(allScores[j].value) > parseInt(allScores[maxScoreIndex].value)) {
                    maxScoreIndex = j;
                }
            }

            var temp = allScores[i];
            allScores[i] = allScores[maxScoreIndex];
            allScores[maxScoreIndex] = temp;
        }

        // load the top five scores
        var rankList = document.getElementById("rank-list");
        var length;
        if (allScores.length < 5) {
            length = allScores.length;
        }
        else {
            length = 5;
        }

        for (var i = 0; i < length; i++) {
            var div = document.createElement("div");
            div.innerHTML = allScores[i].key + ": " + allScores[i].value;
            rankList.appendChild(div);
        }
    };

    function saveScore(score) {
        var name = prompt("GAME OVER!\nEnter nickname:");
        if (localStorage[name]) {
            if (localStorage[name] < score) {
                localStorage[name] = score;
            }
        }
        else {
            localStorage[name] = score;
        }
    }

    requestAnimationFrame(loop);


</script>
</body>
</html>